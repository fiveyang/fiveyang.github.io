<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Icarus</title>
    <link>https://fiveyang.github.io/post/</link>
    <description>Recent content in Posts on Icarus</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Sep 2019 23:44:54 +0800</lastBuildDate>
    
	<atom:link href="https://fiveyang.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>初始化与清理</title>
      <link>https://fiveyang.github.io/2019/09/04/%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E6%B8%85%E7%90%86/</link>
      <pubDate>Wed, 04 Sep 2019 23:44:54 +0800</pubDate>
      
      <guid>https://fiveyang.github.io/2019/09/04/%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E6%B8%85%E7%90%86/</guid>
      <description>1 this关键字 1.1 this关键字引入 先看一段代码
package java_test2; /* * 2019/7/24 * this关键字相关测试 * */ class Banana{ void peel(int i) { //do something } } public class BananaPeel { public static void main(String[] args) { Banana a=new Banana(), b=new Banana(); a.peel(1); b.peel(2); } }  peel方法是怎么知道剥的哪一个香蕉的皮呢？实际上编译器暗自做了一些工作，它吧“所操作对象的引用”作为参数传递给了peel()方法。让上述两个方法变成了这样
Banana.peel(a,1); Banana.peel(b,2);  所以如果我们想在方法内部获得当前对象的引用，但是我们直到程序执行才知道这个引用的标识符怎么办呢，这时候就要使用this关键字，this关键字：this关键字只能在方法内部使用，表示对&amp;rdquo;调用方法的那个对象&amp;rdquo;的引用。 上述代码又变成了这样
Banana.peel(this,1); Banana.peel(this,2);  1.2 在构造器中调用构造器 说白了就是this.s=s;
1.3 static的含义 注意下面几点就行了 + 在static方法中只能调用static方法。 + static方法具有全局函数的语义，有些人认为他不是“面相对象”的。
2 初始化与清理复习笔记-垃圾回收器 2.1 对象存活判定算法  引用计数法：给对象添加一个引用计数器，每当一个地方引用他时，计数器值就加一，当引用失效时，计数器就减一；任何时候计数器为0的对象就是不可能再被使用的（缺点&amp;ndash;很难解决对象之间的相互循环引用问题；主流的Java虚拟机并没有采用引用计数法管理内存）</description>
    </item>
    
    <item>
      <title>临界区</title>
      <link>https://fiveyang.github.io/2019/09/03/%E4%B8%B4%E7%95%8C%E5%8C%BA/</link>
      <pubDate>Tue, 03 Sep 2019 21:01:05 +0800</pubDate>
      
      <guid>https://fiveyang.github.io/2019/09/03/%E4%B8%B4%E7%95%8C%E5%8C%BA/</guid>
      <description>临界区的调度原则 临界区与临界资源  并发进程中与共享变量有关的程序段成为临界区，共享变量代表的资源成为临界资源。
 临界区调度原则  一次只允许一个进程进入临界区内执行 如果已有进程在临界区，其他视图进入的进程等待 进入临界区内的进程应在有限的时间内进出，一遍使等待进程中的一个进入  实现临界区管理的几种错误算法  两个进程都认为对方不在临界区中，同时进入了临界区 两个进程都认为对方在临界区中，进而永久等待  实现临界区管理的Peterson算法  该算法为每个进程设置一个标志，当该标志为true时表示此进程要进入临界区另外设置一个指示器turn，一直是哪个进程可以进入临界区
boolean flag[2]; int turn; void procedure0() { while(true) { flag[0]=true; turn=1; while(flag[1]&amp;amp;&amp;amp;turn==1) /*若flag[1]为false，P0就进入临界区；若flag[1]为tureP0循环等待，只要P1退出临界区，P0即可进入*/ { /* donothing*/ } visit();/*访问临界区*/ flag[0]=false;/*访问临界区完成，procedure0释放出临界区*/ /*remainder section*/ }  } void procedure1() { while(true) { flag[1]=true; turn=0; while(flag[0]&amp;amp;&amp;amp;turn==0) { /* donothing*/ ; } visit();/*访问临界区*/ flag[1]=false;/*访问临界区完成，procedure1释放出临界区*/ /*remainder section*/ } } void main() { flag[0]=flag[1]=false; /*start procedure0 and procedure1*/ ; }  在上面的例子中，我们先假设turn被赋值为1，后赋值为0，那么线程0就该进入临界区，线程1则因为flag[0]&amp;amp;&amp;amp;turn==0而等待，当线程0访问临界区结束后释放了临界区资源&amp;ndash;flag[0]=false;，那么此时flag[0]&amp;amp;&amp;amp;turn==0不成立，线程1因此可以运行临界区</description>
    </item>
    
    <item>
      <title>会话跟踪</title>
      <link>https://fiveyang.github.io/2019/09/02/%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA/</link>
      <pubDate>Mon, 02 Sep 2019 22:29:04 +0800</pubDate>
      
      <guid>https://fiveyang.github.io/2019/09/02/%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA/</guid>
      <description> 4.1 无状态的HTTP协议 Internet协议可以分为有状态协议和无状态协议。HTTP协议是一种无状态协议，采用“连接-请求-应答-关闭”模式，一旦客户端请求结束吴福气就会中断连接，当下一个请求发送时，服务器把这个请求看成一个新的连接，然而对于交互式的Web应用，保持状态是非常重要的，而会话跟踪技术就是来解决这些问题的。
4.2 会话跟踪技术  会话跟踪技术是一种在客户端和服务器间保持HTTP状态的解决方案，从开发角度考虑，就是使上一次请求传递的数据能够维持状态到下一次请求，并且辨认出是否相同的客户端发送出来的
  Cookie技术 Session技术 URL重写技术 隐藏表单域技术  4.2.1 Cookie技术 参见会话跟踪-cookie
4.2.2 Session技术 参见会话跟踪-session
4.2.3 URL重写技术 参见URL重写技术
4.2.4 隐藏表单域 在Form表单中定义隐藏域
&amp;lt;form action=&amp;quot;xx&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;userID&amp;quot; value=&amp;quot;10010&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;提交&amp;quot;&amp;gt; &amp;lt;/form&amp;gt;  隐藏域的获取
String flag=request.getParameter(&amp;quot;userID&amp;quot;);  </description>
    </item>
    
    <item>
      <title>会话跟踪技术-Session</title>
      <link>https://fiveyang.github.io/2019/09/02/%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA%E6%8A%80%E6%9C%AF-session/</link>
      <pubDate>Mon, 02 Sep 2019 22:23:43 +0800</pubDate>
      
      <guid>https://fiveyang.github.io/2019/09/02/%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA%E6%8A%80%E6%9C%AF-session/</guid>
      <description> Session定义  Session技术是指使用HTTPSession对象事先会话跟踪的技术，是一种在服务端包吃会话跟踪的解决方案。
 HttpSession对象会在用户第一次访问服务器的时候由容器创建（注意只有访问JSP、Servlet等程序的时候才会创建，访问HTML、IMAGE等静态资源的时候不会创建）。当用户调用其失效方法（invalidate（））或超过其最大不活动时间时会失效，再次期间用户和服务器之间的多次请求都属于一个会话
Session如何实现识别用户 服务器在创建会话对象时，会为其分配一个唯一的惠华表示：SessionId，以“JSESSIONID”为属性名保存在客户端的Cookie中，在用户的随后请求中，服务器通过这个ID来识别不同的用户，从而实现对每个用户的会话跟踪。这也是为什么我们说Session依赖于Cookie技术，所当我们使用Session的时候记得搞清楚本地浏览器是否接受Cookie，并且设置Cookie的存活时间（这个我不怎么确定）
Session对象获取 前面提到过Session对象是容器帮我们创建的，我们获取是通过
HttpSession session=request.getSession(); //或者 HttpSession session=request.getSession(true);  存取会话域属性 //存取会话域属性 session.setAttribute(&amp;quot;username&amp;quot;,&amp;quot;QST&amp;quot;); //通过属性名“username”从会话域中获取属性值 String name=(String)session.getAttribute(&amp;quot;username&amp;quot;); //通过属性名将属性从会话中移除 session.reMoveAttribute(&amp;quot;name&amp;quot;);  获取和设置会话的最大不活动时间 获取 int time=session.getMaxInactiveInterval(); &amp;gt; 以秒为单位，默认时间为1800秒
可以在web.xml 中配置会话最大不活动时间
&amp;lt;session-config&amp;gt; &amp;lt;session-time&amp;gt;10&amp;lt;/session-time&amp;gt; &amp;lt;/session-config&amp;gt;  或者在代码中设置
session.setMaxInactiveInterval(600);  设置会话失效 session.invalidate();  </description>
    </item>
    
    <item>
      <title>会话跟踪技术-cookie</title>
      <link>https://fiveyang.github.io/2019/09/02/%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA%E6%8A%80%E6%9C%AF-cookie/</link>
      <pubDate>Mon, 02 Sep 2019 22:21:43 +0800</pubDate>
      
      <guid>https://fiveyang.github.io/2019/09/02/%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA%E6%8A%80%E6%9C%AF-cookie/</guid>
      <description> Cookie是干嘛的？ Cookie是会话跟踪技术的一种，是某些网站为了辨别用户身份而在存储在用户终端上的身份信息。
Cookie对象的创建 Cookie cookie=new Cookie(&amp;quot;name&amp;quot;,&amp;quot;value&amp;quot;); response.addCookie(cookie);  显然，Cookie的创建是通过两个String类型参数，第一个表示Cookie名，第二格表示Cookie值，如果一个站点需要存储一个用户的用户名和他的密码，那么我们就需要分别对他的用户名和密码分别设置一个Cookie，然后通过response 的addCookie方法将他反映到客户端。
获取并遍历客户Cookie Cookie[] cookies=request.getCookies(); if(cookies!=null&amp;amp;&amp;amp;cookies.length&amp;gt;0) { for(Cookie c:cookies) { out.println(&amp;quot;属性名：&amp;quot;+c.getName()); out.println(&amp;quot;属性值：&amp;quot;+c.getValue()); } }  设置Cookie访问路径 cookie.setPath(&amp;quot;/chapter04/jsp/&amp;quot;); //某个应用的访问路径  cookie.aetPath(&amp;quot;/&amp;quot;); //所有应用的访问路径  设置Cookie的存活时间 cookie.setMaxAge(7*24*60*60);  默认状态下Cookie保存在浏览器内存中，在浏览器关闭时失效，这种Cookie被称为临时Cookie（或会话Cookie），可以通过上面的方式设置Cookie的存活时间，接受一个int参数，参数为正值表示其存活时间，0表示删除对应的Cookie对象，为负值表示Cookie对象设置为临时对象。
Cookie相关缺点  Cookie可能被浏览器禁用，即时访问的同一个页面不同浏览器保存的Cookie是不能相互访问的 Cookie 可能被删因为每个Cookie都是硬盘上的文件，可能被用户删除 Cookie的大小和数量受限制，一般的浏览器只允许一个站点保存20个Cookie，大小不能超过4KB Cookie的安全性不高，所有的Cookie都是以出文本的形式记录在文件中，因此如果要保存用户名密码等信息，最好事先经过加密处理  </description>
    </item>
    
    <item>
      <title>Servlet核心接口</title>
      <link>https://fiveyang.github.io/2019/09/02/servlet%E6%A0%B8%E5%BF%83%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Mon, 02 Sep 2019 22:17:32 +0800</pubDate>
      
      <guid>https://fiveyang.github.io/2019/09/02/servlet%E6%A0%B8%E5%BF%83%E6%8E%A5%E5%8F%A3/</guid>
      <description>3.1 Servlet核心接口 主要是介绍四个接口 + ServletConfig接口：用于获取Servlet初始化参数和ServletContext对象 + ServletContext接口：代表当前Servlet运行环境，Servlet可以通过ServletContext对象来访问Servlet容器中的各种资源 + HttpServletRequest接口：用于封装Http请求信息 + HTTPServletResponse接口：用于封装Http响应消息
3.2 ServletConfig接口 （生命周期相关）Servlet在初始化一个Servlet的时候，将为改Servlet创建一个唯一的ServletConfig对象，然后调用init（ServletConfig config），将这个对象存储到此Servlet中（参见上一篇的时序图）
这个接口可以访问两项内容：Servlet初始化参数和ServletContext对象 Servlet初始化参数可以通过以下形式在web.xml文件中配置
&amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;user&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;cy&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt;  然后通过下面的方式调用
String user=config.getInitParameter(&amp;quot;user&amp;quot;);  第二种和ServletContext相关，放后面
3.3 ServletContext 接口 （生命周期相关）Web应用启动时，会创建一个唯一的ServletContext对象供Servlet容器的所有Servlet使用，Servlet对象通过这个Context对象访问容器的各种资源，所以ServletContext代表当前Servlet运行环境
这个接口有两种获取方式：通过ServletConfig接口的getServletContext（）方法获得ServletContext对象。二是通过GenericServlet抽象类的getServletContext（）方法获得，但是实际上我们知道GenericServlet是继承了ServletConfig接口所以才有getServletContext（）的。
ServletContext接口的几种类型的方法： + 获取应用范围的初始化参数的方法 + 获取应用范围域属性的方法 + 获取当前Web应用信息的方法 + 获取当前容器信息和输出日志的方法 + 获取服务端文件资源的方法
3.3.1 获取应用的初始化参数 和前面的ServletConfig很像，也是先在web.xml中配置相关参数，然后通过ServletContext 对象的方法来获取这些参数 通过以下方式配置在web.xml
&amp;lt;context-param&amp;gt; &amp;lt;param-name&amp;gt;webSite&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;www.itshixun.com&amp;lt;/param-value&amp;gt; &amp;lt;/context-param&amp;gt; &amp;lt;context-param&amp;gt; &amp;lt;param-name&amp;gt;adminEmail&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;fengjj@itshixun.com&amp;lt;/param-value&amp;gt; &amp;lt;/context-param&amp;gt;  获取方式
// 使用ServletContext对象获取所有初始化参数 Enumeration&amp;lt;String&amp;gt; paramNames = super.getServletContext() .getInitParameterNames(); // 使用ServletContext对象获取某个初始化参数 String webSite = super.</description>
    </item>
    
    <item>
      <title>Servlet基础</title>
      <link>https://fiveyang.github.io/2019/09/02/servlet%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 02 Sep 2019 22:13:20 +0800</pubDate>
      
      <guid>https://fiveyang.github.io/2019/09/02/servlet%E5%9F%BA%E7%A1%80/</guid>
      <description>2.1Servlet 概述 如今，Servlet 在普遍使用的MVC模式的Web开发中仍占据重要地位，目前流行的Web框架都基于Servlet技术，如Struts、Webwork、Spring MVC 。只有掌握了Servlet才能跟那个掌握Java Web编程思想的核心和精髓。
MVC：MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。
2.1.1 Servlet简介 Servlet对请求的处理和响应过程 1）接受HTTP请求 2）去的请求信息，包括请求头和请求参数数据 3）调用其他Java类方法，完成具体的业务功能 4）实现到其他Web组件的跳转（包括重定向和请求转发） 5）生成HTTP响应（包括HTML显影和非HTML响应）
Servlet具有的特点 1）高效：在传统的CGI中，每个请求都需要建立一个进程，而Servlet每个请求采用轻量级的线程来处理；另外如果有N个并发的请求，CGI 需要重复装载代码N次，而Servlet只需要装载一次 2）方便： Servlet提供了大量的实用工具例程 3）交互轻松，Servlet还能够在各个程序之间共享数据，是的数据库连接池之类的功能很容易实现 4）可移植性：java特性嘛
Servlet运行在服务端，由Servlet容器（引擎）管理
我们使用的Servlet 3.0 需要Tomcat 7.0 以上版本的Web服务器
2.1.2 Servlet体系结构 Servlet API 包含两个软件包 javax.servlet 包 javax.servlet.http 包 Servlet API 主要接口关系图 1.Servlet 接口 所有的Servlet都必须直接或间接的实现javax.servlet.Servlet接口。提供与Servlet生命周期相关的方法。 1 ) init(ServletConfig config) 初始化方法，Servlet实例化之后容器调用该方法执行Servlet实例化，没有正常结束的时候会产生ServletException异常 2） service(ServletRequest req,ServletResponse resp) 服务方法，接受请求和响应，req resp对象含有响应的方法 3 ) destroy() Servlet 的销毁方法 4 ) getServletConfig() 让Servlet 获得ServletConfig对象 5 ) getServletInfo() 返回一个String 包含Servlet信息，例如开发者、创建日期、描述信息等</description>
    </item>
    
    <item>
      <title>Java Web 入门</title>
      <link>https://fiveyang.github.io/2019/09/02/java-web-%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 02 Sep 2019 22:08:30 +0800</pubDate>
      
      <guid>https://fiveyang.github.io/2019/09/02/java-web-%E5%85%A5%E9%97%A8/</guid>
      <description>1.1 Web应用概述 1.1.1Web应用简介 背景：信息共享、电子商务交易、在线办公、在线业务办理促进了Web应用的发展。
发展：最初阶段Web应用只是一个静态的网站，所有的网页都是由固定的静态HTML页 面组成，当页面内容需要更改的时候就需要通过修改整个HTML页面实现。而为了实现与用户的交互与内容的实时更新，动态网站随之而生。
动态网站必须具备的几个特征： 1）交互性：根据用户的操作以及请求网页会动态改变并响应。 2）自动更新：无需手动更新页面，系统会自动生成新的页面，从而大幅度减少网站的维护成本。 3）多样性：不同时间、不同用户访问同一网站可能会显示不同的内容。
注意：实际应用中使用动静结合网站中频繁更新的使用动态网页，不需要频繁更新的使用静态网页。
下面介绍一下几个动态网页技术 1 )CGI（通用网关接口），因为编写困难逐渐被新的动态网页技术替代。 2）ASP和ASP.NET（动态服务器页面），ASP本质上采用的是一种脚本语言，除了使用大量的组件没有其他方法提高开发效率，并且只能运行在Windows系统上，平台兼容性差。后来微软推出了ASP.NET，成为主流动态网站技术之一。 3）PHP（超文本预处理语言），语法独特、支持多平台。成为最火热的脚本语言一。 4）Servlet 改正了CGI程序的缺点，但是在界面设计方面十分的困难，需要在java中插入大量的HTML代码，每次改动都需要重新编译，于是产生了JSP技术。 5）JSP 一种实现java和HTML代码混合的技术。
注意：JSP后面会讲到实际上就是java文件，所以能够完成Servlet能完成的所有工作，但是他并不是来替代Servlet。二者是一种互补的关系，JSP设计页面简单，Servlet涉及页面困难，但是便于书写java代码，所以二者结合实现业务逻辑分离。
1.1.2 Web应用架构 C/S结构：即Client/Server(客户机/服务器)结构，是大家熟知的软件系统体系结构，通过将任务合理分配到Client端和Server端，降低了系统的通讯开销，可以充分利用两端硬件环境的优势。开发C/S架构可以采用多种语言，包括Java,C++,C#，以及Dephi等
B/S结构：即Browser/Server(浏览器/服务器)结构，是随着Internet技术的兴起，对C/S结构的一种变化或者改进的结构。在这种结构下，用户界面完全通过WWW浏览器实现。前端 在大部分企业就是做浏览器端展现相关的工作，会用到html,css,js,ps,ai等等，而“后端”的主要工作室程序开发、数据处理了，比如：php，asp，mysql，mssql。 区别： + 硬件环境不同，C/S通常是建立在专用的网络上，小范围的网络环境。而B/S是建立在广域网上的，适应范围强，通常有操作系统和浏览器就行； + C/结构比B/S结构更安全，因为用户群相对固定，对信息的保护更强； + B/S结构维护升级比较简单，而C/S结构维护升级相对困难；
1.1.3Web应用的运行过程 1）输入网址 2）发送请求 3）SQL请求 4）返回请求 5）返回响应结果 6）显示页面内容
1.1.4 Java Web应用优势 1）平台无关性：因为java具有平台无关性 2）效率高：当Servlet和JSP接收到请求后，在相同的进程中将创建另一个线程来处理该请求 3）可访问API：Servlet和JSP是java的一整套解决方案，可以使用Java API 并且可以利用java语言提供的强大功能
1.2Java Web应用开发 需要准备的环境及工具
JDK 我们一般采用的JDK8，因为稳定！
Eclipse 我是用的是2018-9 ，使用的时候记得调整为黑色主题（好看），假如安装Eclipse的时候忘记勾选JavaEE 记得在market中下载相关插件。
Tomcat 我们使用的是8.0 如果下载不到8.0 只有8.5或者以上，可以把Tomcat中的配置文件改成8.0 然后就能正常使用 Tomcat8 只支持JDK7 +版本
Eclipse中Tomcat配置 见书
QQ：872742416 （个人学习使用）材料整理自《Java Web技术及应用》及网络，侵删。</description>
    </item>
    
    <item>
      <title>并发进程</title>
      <link>https://fiveyang.github.io/2019/09/02/%E5%B9%B6%E5%8F%91%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Mon, 02 Sep 2019 22:02:33 +0800</pubDate>
      
      <guid>https://fiveyang.github.io/2019/09/02/%E5%B9%B6%E5%8F%91%E8%BF%9B%E7%A8%8B/</guid>
      <description>并发进程 1 程序执行的顺序性 1.1 程序执行顺序性  程序执行的顺序性包括两个定义：程序内部的顺序性和程序外部的顺序性
 内部：程序内部的顺序性是指单线程进程执行时呈现程序内部的顺序性
外部：程序外部的顺序性是指多个进程之间的顺序执行关系，这人写进程在时间上按照次序严格有效的执行，完成一个作业级的任务。
2 程序执行的并发性 2.1 程序并发性的含义 进程的并发性是指一组进程在执行时间上是重叠的，即一个进程执行的第一条指令是在另一条指令结束前开始的。 &amp;gt; 并发的实质是一个处理器在几个进程之间的多路复用
2.2 并发程序设计  把一个程序编制成若干个可同时执行的程序模块的方法
 如果这些模块属于同一个进程（说明这个程序是一个单线程，这个单线程通过多个线程分别实现这些模块），在进程内部执行，则称为并发多线程程序设计
如果模块属于不同的进程（说明这个程序是通过多个进程实现不同的功能模块），则称为并发多进程程序设计。
2.3 并发进程分类  并发进程之间的关系分为两类：无关的和交互的
 无关的并发进程：一组并发进程分别在不同的变量集合上操作
交互的并发进程：一组并发进程共享某些变量
 并发进程的无关性是进程的执行与实践无关的一个充分条件，又称为Bernstein条件。相关定义可以参考下方链接。
https://baike.baidu.com/item/Bernstein%E6%9D%A1%E4%BB%B6/5452747?fr=aladdin
大概意思是用这个Bernstein条件用来确定那些进程是可以并发的。
 3 与时间有关的错误  对于一组交互并发的进程，若执行的相对速度无法相互控制，则会出现与时间有关的错误，与时间有关的错误有两种表现形式：结果不唯一和永远等待
 3.1 结果不唯一 购机票问题，可能会出现同一张票卖给两个乘客的情况，正确的做法是执行购买操作时只能一先一后不能同时执行。
3.2 永远等待 借书还书问题，合作进程之间等待、唤醒之类的同步信号发送次序颠倒时
4 进程的交互 4.1 进程之间的竞争关系  竞争关系时由于并发进程共用一套计算机系统资源引起的
 死锁：一组已经获得部分资源的进程等待获得其他进程所占用的资源，最终该组进程陷入死锁僵局 &amp;gt; 解决方式：进程互斥&amp;ndash;若干进程要使用同一共享资源时，最多只允许一个进程使用
饥饿：一个进程由于其他进程总是优于它而被无限期拖延 &amp;gt;解决方式：FCFS（先来先服务）策略</description>
    </item>
    
    <item>
      <title>多态复习总结</title>
      <link>https://fiveyang.github.io/2019/09/01/%E5%A4%9A%E6%80%81%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 01 Sep 2019 10:53:33 +0800</pubDate>
      
      <guid>https://fiveyang.github.io/2019/09/01/%E5%A4%9A%E6%80%81%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/</guid>
      <description>多态复习总结 现在我们可以理解多态的定义了
多态首先是建立在继承的基础上的，先有继承才能有多态。多态是指不同的子类在继承父类后分别都重写覆盖了父类的方法，即父类同一个方法，在继承的子类中表现出不同的形式。多态成立的另一个条件是在创建子类时候必须使用父类new子类的方式。
多态（Polymorphism）按字面的意思就是“多种状态”。在面向对象语言中，接口的多种不同的实现方式即为多态。引用Charlie Calverts对多态的描述——多态性是允许你将父对象设置成为一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作（摘自“Delphi4 编程技术内幕”）。</description>
    </item>
    
    <item>
      <title>多态复习笔记-5</title>
      <link>https://fiveyang.github.io/2019/09/01/%E5%A4%9A%E6%80%81%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-5/</link>
      <pubDate>Sun, 01 Sep 2019 10:31:32 +0800</pubDate>
      
      <guid>https://fiveyang.github.io/2019/09/01/%E5%A4%9A%E6%80%81%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-5/</guid>
      <description>多态复习笔记-5 构造器内部的多态方法的行为 在前面的笔记中我们知道了构造器的调用顺序，首先是调用了基类的构造器，假如我们将动态绑定的方法放在了构造器中，那么在调用Glyph的构造器中的draw方法实际上应该调用的是导出类RoundGlyph 中所覆盖后的draw方法，此时我们会发现一个问题：这个导出类RoundGlyph 中所覆盖后的draw方法此时并没有初始化而被调用，那么为什么没有出现问题呢？
观察运行结果我们得出结论：在其他任何事件发生之前，将分配给对象的存储空间设置为二进制的零，这样有一个优点，就是所有东西都至少初始化为零，那么进行上述操作的时候就不会出现异常。这一点可以加在前面笔记构造器调用顺序三条顺序的最前面
package java_test1; /* * 2019/7/23 * 构造器内部的多态方法的行为 * */ class Glyph { void draw() { System.out.println(&amp;quot;Glyph.draw()&amp;quot;); } Glyph() { System.out.println(&amp;quot;Glyph() before draw()&amp;quot;); draw(); System.out.println(&amp;quot;Glyph() after draw()&amp;quot;); } } class RoundGlyph extends Glyph { private int radius = 1; RoundGlyph(int r) { radius = r; System.out.println(&amp;quot;RoundGlyph.RoundGlyph(), radius = &amp;quot; + radius); } void draw() { System.out.println(&amp;quot;RoundGlyph.draw(), radius = &amp;quot; + radius); } } public class PolyConstructors { public static void main(String[] args) { new RoundGlyph(5); } } //output: // Glyph() before draw() // RoundGlyph.</description>
    </item>
    
    <item>
      <title>多态复习笔记-4</title>
      <link>https://fiveyang.github.io/2019/09/01/%E5%A4%9A%E6%80%81%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-4/</link>
      <pubDate>Sun, 01 Sep 2019 10:31:27 +0800</pubDate>
      
      <guid>https://fiveyang.github.io/2019/09/01/%E5%A4%9A%E6%80%81%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-4/</guid>
      <description>多态复习笔记-4 构造器的调用顺序 package java_test1; /* * 2019/7/23 * 构造器与多态-构造器的调用顺序 * */ class Meal{ Meal(){ System.out.println(&amp;quot;Meal()&amp;quot;); } } class Bread{ Bread(){ System.out.println(&amp;quot;Bread()&amp;quot;); } } class Cheese{ Cheese(){ System.out.println(&amp;quot;Cheese()&amp;quot;); } } class Lettuce{ Lettuce(){ System.out.println(&amp;quot;Lettuce()&amp;quot;); } } class Lunch extends Meal{ Lunch(){ System.out.println(&amp;quot;Lunch()&amp;quot;); } } class PortableLunch extends Lunch{ PortableLunch(){ System.out.println(&amp;quot;PortableLunch()&amp;quot;); } } public class Sandwich extends PortableLunch{ private Bread b=new Bread(); private Cheese c=new Cheese(); private Lettuce l=new Lettuce(); public Sandwich() { System.</description>
    </item>
    
    <item>
      <title>多态复习笔记-3</title>
      <link>https://fiveyang.github.io/2019/09/01/%E5%A4%9A%E6%80%81%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-3/</link>
      <pubDate>Sun, 01 Sep 2019 10:31:21 +0800</pubDate>
      
      <guid>https://fiveyang.github.io/2019/09/01/%E5%A4%9A%E6%80%81%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-3/</guid>
      <description>多态复习笔记-3 缺陷：域与静态方法 域的缺陷:
package java_test1; /* * 2019/7/23 * 缺陷：域与静态方法 * */ class Super{ public int field=0; public int getField() {return field;} } class Sub extends Super{ public int field=1; public int getField() {return field;} public int getSuperField() {return super.field;} } public class FieldAccess { public static void main(String[] args) { Super sup=new Sub(); System.out.println(&amp;quot;sup.field=&amp;quot;+sup.field+ &amp;quot;,sup.getField()=&amp;quot;+sup.getField()); Sub sub=new Sub(); System.out.println(&amp;quot;sub.field=&amp;quot;+sub.field+ &amp;quot;,sub.getField()=&amp;quot;+sub.getField()+ &amp;quot;,sub.getSuperField()=&amp;quot;+sub.getSuperField()); } } //output: //sup.field=0,sup.getField()=1 //sub.field=1,sub.getField()=1,sub.getSuperField()=0  当Sub对象转化为Super引用时候，任何域访问操作都将由编译器解析，因此不是多态的。当我们将域设置为public的时候，我们调用的field是依据他的引用类型，比如sup.field他是Sub对象赋给Super引用，那么调用她输出的就是0，这和我们的方法覆盖不一样。 + 通常我们将所有的域设置为private类型，然后我们调用方法访问他们</description>
    </item>
    
    <item>
      <title>多态复习笔记-2</title>
      <link>https://fiveyang.github.io/2019/09/01/%E5%A4%9A%E6%80%81%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-2/</link>
      <pubDate>Sun, 01 Sep 2019 10:31:15 +0800</pubDate>
      
      <guid>https://fiveyang.github.io/2019/09/01/%E5%A4%9A%E6%80%81%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-2/</guid>
      <description>多态复习笔记-2 缺陷：覆盖私有方法 package java_test1; /* * 2019/7/23 * 覆盖问题 * */ public class PrivateOverride { private void f() { System.out.println(&amp;quot;private f()&amp;quot;); } public static void main(String[] args) { PrivateOverride po=new Derived(); po.f(); } } class Derived extends PrivateOverride{ public void f() { System.out.println(&amp;quot;public f()&amp;quot;); } } //output:private f()  我们期望输出的是public f() ，但是由于private 的方法被认为是final方法，而且对于导出类是屏蔽的，这种情况下Derived的f()方法就被认为是一个全新的方法。 + 结论：只有非private方法才可以被覆盖，所以我们在多态的使用时候要将基类的方法设置成非private。</description>
    </item>
    
    <item>
      <title>多态复习笔记-1</title>
      <link>https://fiveyang.github.io/2019/09/01/%E5%A4%9A%E6%80%81%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</link>
      <pubDate>Sun, 01 Sep 2019 10:20:00 +0800</pubDate>
      
      <guid>https://fiveyang.github.io/2019/09/01/%E5%A4%9A%E6%80%81%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</guid>
      <description>多态复习笔记-1 再论向上转型 package java_test1; /* * 2019/7/22 * 多台测试向上转型 * */ //创建一个乐谱枚举类型 enum Note{ MIDDLE_C,C_SHARP,B_FLAT; } //创建一个instrument乐器类型 class instrument{ public void play(Note n) { System.out.println(&amp;quot;instrument.play()&amp;quot;); } } //创建一个Wind管乐器类型，继承自instrument //注意这里和instrument类型的play方法不同，她多输出了一个n class Wind extends instrument{ public void play(Note n) { System.out.println(&amp;quot;Wind.play()&amp;quot;+n); } } public class Music { //演奏方法 public static void tune(instrument i) { i.play(Note.MIDDLE_C); } public static void main(String[] args) { Wind w=new Wind(); tune(w); } } //output:Wind.play()MIDDLE_C   music.</description>
    </item>
    
    <item>
      <title>我的第一篇博客</title>
      <link>https://fiveyang.github.io/2019/08/31/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 31 Aug 2019 15:21:52 +0800</pubDate>
      
      <guid>https://fiveyang.github.io/2019/08/31/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>我的第一篇博客（实际上写了N遍）</description>
    </item>
    
    <item>
      <title>操作系统</title>
      <link>https://fiveyang.github.io/1/01/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fiveyang.github.io/1/01/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
      <description>进程与线程 主要掌握进程与线程的区别和联系 &amp;gt;进程是系统资源分配的最小单位,线程是程序执行的最小单位； 进程使用独立的数据空间,线程共享进程的数据空间；
线程调度 简单了解几种线程调度算法以及这两个衡量批处理系统的调度性能 + 周转时间：作业结束完成时间-作业进入系统时间 + 带权周转时间：周转时间/所需运行时间
先来先服务调度  策略：在到达系统的一批作业中，先来先服务算法（FCFS）按照作业进入系统的先后次序挑选作业，先进入系统优先被挑选，这是一种非剥夺式算法； 效果：有利于CPU繁忙型作业，不利于I/O繁忙型作业；
优先级调度 策略：优先级调度算法根据确定的优先级选取进程/线程，每次总是选择就绪队列中优先级最高者运行；优先级调度算法可以采用剥夺或者非剥夺方式，如果就绪队列中出现优先级更高的进程/线程，剥夺式调度可立刻执行该进程/线程，非剥夺式等待当前运行进程结束或者出现等待时间主动让出处理器后，才会调度另一进程投入运行。
 优先级规定者有是用户或系统；
 优先级还可分为静态优先级和动态优先级；
  多级反馈队列调度  多级反馈队列调度算法建立两个或多个就绪进程队列，每个队列赋予不同的优先级，较高优先级一般分配给较短的时间片。处理器每次从高优先级就绪队列中选取可占用处理器的进程，只有在无进程时，才会从较低优先级就绪队列中选取进程，同一队列中的进程按照先来先服务原则排队。开始工作时，新锦成首先进入高优先级队列等候调度，若能在该优先级的一个时间片内执行完成则进程撤离系统，否则进入低一级队列等候调度，若处理器正在执行低优先级队列进程时，若新的进程到达高优先级就绪队列，则处理器暂停当前低优先级队列进程的执行，转而执行高优先级队列中新到进程，因此，多级反馈队列调度是一种剥夺式调度。 不足：多级反馈队列调度存在饥饿问题，当新的进程不断到来时，低优先级队列中的进程将长时间得不到调度
时间片轮转调度 调度程序每次将CPU分配给就绪队列中的首进程使用一个时间片，就绪队列中的每个进程轮流运行一个时间片，当这个时间片耗尽时，强迫当前线程让出处理器，排到就绪队列尾部，等候下一轮调度。是一种剥夺式调度，系统消耗在进程切换上的开销比较大，那么时间片大小的选取就显得非常重要。
高响应比优先调度 响应比=1+已等待时间/作业处理时间
 策略：每当调度一个作业的时，都要计算后背作业队中每个作业的响应比，选择响应比最高者投入运行。对于FCFS，只考虑用户等待时间，对于SJF，只考虑计算时间，而高响应比优先调度（HRRF）采用的响应比既考虑了等待时间又考虑了作业处理时间，所以是二者折中的调度算法，是一种非剥夺式调度。
  进程/线程切换的步骤 进程上下文 进程上下文包含了进程执行所需的所有信息 + 用户地址空间：包括程序代码，数据，用户堆栈等； + 控制信息：进程描述符，内核栈等； + 硬件上下文：（注意中断也要保存硬件上下文只是保存的方法不同）。
进程切换的步骤  .切换页目录以使用新的地址空间 切换内核栈 切换硬件上下文
线程切换与进程切换的对比 对于linux来说，线程和进程的最大区别就在于地址空间。对于线程切换，第1步是不需要做的，第2和3步是进程和线程切换都要做的。所以明显是进程切换代价大
线程切换与进程切换的代价对比 线程上下文切换和进程上下文切换一个最主要的区别是线程的切换虚拟内存空间依然是相同的，但是进程切换是不同的。这两种上下文切换的处理都是通过操作系统内核来完成的。内核的这种切换过程伴随的最显著的性能损耗是将寄存器中的内容切换出。
 外一个隐藏的损耗是上下文的切换会扰乱处理器的缓存机制。简单的说，一旦去切换上下文，处理器中所有已经缓存的内存地址一瞬间都作废了。还有一个显著的区别是当你改变虚拟内存空间的时候，处理的页表缓冲（processor’s Translation Lookaside Buffer (TLB)）或者相当的神马东西会被全部刷新，这将导致内存的访问在一段时间内相当的低效。但是在线程的切换中，不会出现这个问题。
进程间通信 IPC 共享存储  在内存中创建一个共享空间，两个进程对共享空间的访问必须是互斥的（互斥访问通过操作系统提供的工具实现），操作系统只提供共享空间和同步操作工具（P V操作）。
  共享存储分为两种 + 一种是基于数据结构的共享：比如共享空间只能存放一个长度为10 的数组，这种共享方式速度慢、限制多，是一种低级通信方式。 + 另一种是基于存储区的共享：在内存中划出一块共享存储区，数据的形式、存放位置都由进程控制，而不是操作系统，是一种高级通信方式。</description>
    </item>
    
  </channel>
</rss>